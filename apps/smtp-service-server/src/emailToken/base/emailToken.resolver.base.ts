/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailToken } from "./EmailToken";
import { EmailTokenCountArgs } from "./EmailTokenCountArgs";
import { EmailTokenFindManyArgs } from "./EmailTokenFindManyArgs";
import { EmailTokenFindUniqueArgs } from "./EmailTokenFindUniqueArgs";
import { CreateEmailTokenArgs } from "./CreateEmailTokenArgs";
import { UpdateEmailTokenArgs } from "./UpdateEmailTokenArgs";
import { DeleteEmailTokenArgs } from "./DeleteEmailTokenArgs";
import { EmailTokenService } from "../emailToken.service";
@graphql.Resolver(() => EmailToken)
export class EmailTokenResolverBase {
  constructor(protected readonly service: EmailTokenService) {}

  async _emailTokensMeta(
    @graphql.Args() args: EmailTokenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailToken])
  async emailTokens(
    @graphql.Args() args: EmailTokenFindManyArgs
  ): Promise<EmailToken[]> {
    return this.service.emailTokens(args);
  }

  @graphql.Query(() => EmailToken, { nullable: true })
  async emailToken(
    @graphql.Args() args: EmailTokenFindUniqueArgs
  ): Promise<EmailToken | null> {
    const result = await this.service.emailToken(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailToken)
  async createEmailToken(
    @graphql.Args() args: CreateEmailTokenArgs
  ): Promise<EmailToken> {
    return await this.service.createEmailToken({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmailToken)
  async updateEmailToken(
    @graphql.Args() args: UpdateEmailTokenArgs
  ): Promise<EmailToken | null> {
    try {
      return await this.service.updateEmailToken({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailToken)
  async deleteEmailToken(
    @graphql.Args() args: DeleteEmailTokenArgs
  ): Promise<EmailToken | null> {
    try {
      return await this.service.deleteEmailToken(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
