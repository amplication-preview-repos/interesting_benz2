/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EmailToken as PrismaEmailToken } from "@prisma/client";

export class EmailTokenServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmailTokenCountArgs, "select">
  ): Promise<number> {
    return this.prisma.emailToken.count(args);
  }

  async emailTokens<T extends Prisma.EmailTokenFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailTokenFindManyArgs>
  ): Promise<PrismaEmailToken[]> {
    return this.prisma.emailToken.findMany<Prisma.EmailTokenFindManyArgs>(args);
  }
  async emailToken<T extends Prisma.EmailTokenFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailTokenFindUniqueArgs>
  ): Promise<PrismaEmailToken | null> {
    return this.prisma.emailToken.findUnique(args);
  }
  async createEmailToken<T extends Prisma.EmailTokenCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailTokenCreateArgs>
  ): Promise<PrismaEmailToken> {
    return this.prisma.emailToken.create<T>(args);
  }
  async updateEmailToken<T extends Prisma.EmailTokenUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailTokenUpdateArgs>
  ): Promise<PrismaEmailToken> {
    return this.prisma.emailToken.update<T>(args);
  }
  async deleteEmailToken<T extends Prisma.EmailTokenDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailTokenDeleteArgs>
  ): Promise<PrismaEmailToken> {
    return this.prisma.emailToken.delete(args);
  }
  async CreateEmailToken(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async GetEmailToken(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
